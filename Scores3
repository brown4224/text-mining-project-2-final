Base with Random Forest
    X = rv[["cosine_title"] + ["cosine_body"]
    ]

             precision    recall  f1-score   support

          1       0.34      0.31      0.33       122
          2       0.21      0.20      0.20       120
          3       0.49      0.57      0.52       246
          4       0.27      0.22      0.24       119

avg / total       0.36      0.37      0.37       607





    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
    ]



             precision    recall  f1-score   support

          1       0.33      0.35      0.34       122
          2       0.23      0.22      0.22       120
          3       0.45      0.51      0.48       246
          4       0.31      0.22      0.25       119

avg / total       0.35      0.36      0.36       607

    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           # + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           + ["common_title_s"]+ ["common_body_s"]
    ]
             precision    recall  f1-score   support

          1       0.36      0.39      0.38       122
          2       0.21      0.19      0.20       120
          3       0.45      0.51      0.48       246
          4       0.30      0.21      0.25       119

avg / total       0.35      0.36      0.36       607




    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           # + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           + ["common_title"]+ ["common_body"]
    ]
             precision    recall  f1-score   support

          1       0.35      0.34      0.35       122
          2       0.16      0.18      0.17       120
          3       0.43      0.45      0.44       246
          4       0.27      0.20      0.23       119

avg / total       0.33      0.33      0.33       607
    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           + ["common_title_s"]+ ["common_body_s"]
    ]

             precision    recall  f1-score   support

          1       0.35      0.43      0.38       122
          2       0.22      0.23      0.22       120
          3       0.45      0.49      0.47       246
          4       0.30      0.14      0.19       119

avg / total       0.35      0.36      0.35       607

    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           # + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           # + ["common_title_s"]+ ["common_body_s"]
           + ["title_noun_union"] + ["body_noun_union"]
    ]
                 precision    recall  f1-score   support

          1       0.30      0.34      0.32       122
          2       0.21      0.22      0.22       120
          3       0.46      0.50      0.48       246
          4       0.33      0.22      0.26       119

avg / total       0.35      0.36      0.35       607


    X = rv[["cosine_title"] + ["cosine_body"]

    clf = KNeighborsClassifier(n_neighbors=9, algorithm='brute').fit(X_train, y_train)

             precision    recall  f1-score   support

          1       0.39      0.41      0.40       122
          2       0.21      0.15      0.17       120
          3       0.47      0.64      0.54       246
          4       0.27      0.13      0.17       119

avg / total       0.36      0.40      0.37       607


    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           # + ["common_title_s"]+ ["common_body_s"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]
                        precision    recall  f1-score   support

          1       0.36      0.35      0.36       122
          2       0.22      0.22      0.22       120
          3       0.42      0.54      0.48       246
          4       0.26      0.13      0.17       119

avg / total       0.34      0.36      0.34       607

    clf = KNeighborsClassifier(n_neighbors=11, algorithm='brute').fit(X_train, y_train)


          1       0.38      0.38      0.38       122
          2       0.22      0.21      0.21       120
          3       0.47      0.60      0.52       246
          4       0.38      0.17      0.23       119

avg / total       0.38      0.39      0.38       607
    clf = KNeighborsClassifier(n_neighbors=21, algorithm='brute').fit(X_train, y_train)

             precision    recall  f1-score   support

          1       0.42      0.41      0.41       122
          2       0.14      0.04      0.06       120
          3       0.43      0.73      0.55       246
          4       0.39      0.12      0.18       119

avg / total       0.36      0.41      0.35       607
    X = rv[["cosine_title"] + ["cosine_body"]
           # + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           # + ["common_title_s"]+ ["common_body_s"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

    clf = MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(15,), random_state=1).fit(X_train, y_train)


             precision    recall  f1-score   support

          1       0.48      0.34      0.39       122
          2       0.00      0.00      0.00       120
          3       0.43      0.91      0.59       246
          4       0.00      0.00      0.00       119

avg / total       0.27      0.44      0.32       607


             precision    recall  f1-score   support

  'precision', 'predicted', average, warn_for)
          1       0.37      0.17      0.23       122
          2       0.09      0.02      0.03       120
          3       0.41      0.89      0.56       246
          4       0.00      0.00      0.00       119

avg / total       0.26      0.40      0.28       607


    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           # + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           # + ["common_title_s"]+ ["common_body_s"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]



  'precision', 'predicted', average, warn_for)
          1       0.48      0.34      0.39       122
          2       0.00      0.00      0.00       120
          3       0.43      0.91      0.59       246
          4       0.00      0.00      0.00       119

avg / total       0.27      0.44      0.32       607

    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           # + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           # + ["common_title_s"]+ ["common_body_s"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    scaler.fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)
             precision    recall  f1-score   support

          1       0.44      0.40      0.42       122
          2       0.00      0.00      0.00       120
          3       0.44      0.89      0.59       246
          4       0.00      0.00      0.00       119

avg / total       0.27      0.44      0.32       607

    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           # + ["common_title_s"]+ ["common_body_s"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

                        precision    recall  f1-score   support

          1       0.42      0.36      0.39       122
          2       0.29      0.07      0.11       120
          3       0.43      0.75      0.54       246
          4       0.17      0.06      0.09       119

avg / total       0.35      0.40      0.34       607

    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]
           + ["common_title_s"]+ ["common_body_s"]
           + ["title_noun_union"] + ["body_noun_union"]
           + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

                        precision    recall  f1-score   support

          1       0.37      0.21      0.27       122
          2       0.21      0.14      0.17       120
          3       0.42      0.60      0.49       246
          4       0.19      0.17      0.18       119

avg / total       0.32      0.35      0.32       607
    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           # + ["common_title_s"]+ ["common_body_s"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]


             precision    recall  f1-score   support

          1       0.41      0.38      0.39       122
          2       0.24      0.19      0.21       120
          3       0.44      0.50      0.47       246
          4       0.27      0.27      0.27       119

avg / total       0.36      0.37      0.36       607
    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           + ["common_title_s"]+ ["common_body_s"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]
             precision    recall  f1-score   support

          1       0.33      0.31      0.32       122
          2       0.25      0.25      0.25       120
          3       0.41      0.46      0.43       246
          4       0.23      0.19      0.21       119

avg / total       0.33      0.34      0.33       607

    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           + ["common_title"]+ ["common_body"]
           # + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

             precision    recall  f1-score   support

          1       0.41      0.36      0.38       122
          2       0.21      0.17      0.19       120
          3       0.46      0.50      0.48       246
          4       0.23      0.26      0.25       119

avg / total       0.36      0.36      0.36       607

    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           + ["common_title"]+ ["common_body"]
           + ["title_noun_union"] + ["body_noun_union"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]


             precision    recall  f1-score   support

          1       0.32      0.32      0.32       122
          2       0.24      0.23      0.24       120
          3       0.44      0.50      0.47       246
          4       0.29      0.23      0.26       119

avg / total       0.35      0.36      0.35       607

    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           + ["common_title"]+ ["common_body"]
           # + ["title_noun_union"] + ["body_noun_union"]
            +["query_noun"] + ["title_noun"] + ["body_noun"]
           # + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

                        precision    recall  f1-score   support

          1       0.39      0.30      0.33       122
          2       0.23      0.19      0.21       120
          3       0.44      0.45      0.44       246
          4       0.26      0.37      0.31       119

avg / total       0.35      0.35      0.35       607


    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           + ["common_title"]+ ["common_body"]
           # + ["title_noun_union"] + ["body_noun_union"]
           #  +["query_noun"] + ["title_noun"] + ["body_noun"]
           + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           # + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]
             precision    recall  f1-score   support

          1       0.36      0.40      0.38       122
          2       0.22      0.21      0.21       120
          3       0.48      0.50      0.49       246
          4       0.24      0.20      0.22       119

avg / total       0.36      0.36      0.36       607


    ''' Step 6. Defining the feature and label  for classification'''
    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           + ["common_title"]+ ["common_body"]
           # + ["title_noun_union"] + ["body_noun_union"]
           #  +["query_noun"] + ["title_noun"] + ["body_noun"]
           + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

             precision    recall  f1-score   support

          1       0.49      0.38      0.43       122
          2       0.21      0.25      0.23       120
          3       0.45      0.49      0.47       246
          4       0.29      0.25      0.27       119

avg / total       0.38      0.37      0.37       607


Random Forest
    X = rv[["cosine_title"] + ["cosine_body"]
           + ["cosine_title_w2v"]+ ["cosine_body_w2v"]

           + ["cosine_title_polarity"] + ["cosine_title_subjectivity"] + ["cosine_body_polarity"] + ["cosine_body_subjectivity"]
           + ["max_query_idf"] + ["max_pos_query_idf"] + ["norm_query_idf"] + ["len_query_idf"] + ["prob_query_idf"]+["mean_query_idf"]
           + ["max_title_idf"] + ["max_pos_title_idf"] + ["norm_title_idf"] + ["len_title_idf"] + ["prob_title_idf"]+["mean_title_idf"]
           + ["max_body_idf"] + ["max_pos_body_idf"] + ["norm_body_idf"] + ["len_body_idf"] + ["prob_body_idf"]+["mean_body_idf"]
           + ["common_title"]+ ["common_body"]

        + ["query_vec_w2v_max"] + ["query_vec_w2v_norm"] + ["query_vec_w2v_sum"] + ["query_vec_w2v_prob"]
        + ["doc_vec_w2v_max"] + ["doc_vec_w2v_norm"] + ["doc_vec_w2v_sum"] + ["doc_vec_w2v_prob"]
        + ["body_vec_w2v_max"] + ["body_vec_w2v_norm"] + ["body_vec_w2v_sum"] + ["body_vec_w2v_prob"]
           # + ["title_noun_union"] + ["body_noun_union"]
           #  +["query_noun"] + ["title_noun"] + ["body_noun"]
           + ["cosine_title_polarity"]+ ["cosine_body_polarity"]
           + ["cosine_title_subjectivity"]+ ["cosine_body_subjectivity"]

           ]

             precision    recall  f1-score   support

          1       0.43      0.46      0.45       122
          2       0.28      0.28      0.28       120
          3       0.46      0.54      0.50       246
          4       0.26      0.14      0.18       119

avg / total       0.38      0.40      0.38       607

    clf = AdaBoostClassifier(base_estimator=None, n_estimators=100).fit(X_train, y_train)
             precision    recall  f1-score   support

          1       0.46      0.38      0.41       122
          2       0.30      0.21      0.25       120
          3       0.43      0.59      0.50       246
          4       0.27      0.20      0.23       119

avg / total       0.38      0.39      0.38       607


    clf = RandomForestClassifier().fit(X_train, y_train)
    clf = RandomForestClassifier(warm_start=True).fit(X_train, y_train)

                 precision    recall  f1-score   support

          1       0.42      0.40      0.41       122
          2       0.23      0.27      0.25       120
          3       0.43      0.52      0.47       246
          4       0.26      0.11      0.15       119

avg / total       0.35      0.37      0.35       607

             precision    recall  f1-score   support

          1       0.39      0.34      0.36       122
          2       0.27      0.28      0.28       120
          3       0.47      0.61      0.53       246
          4       0.31      0.14      0.20       119

avg / total       0.38      0.40      0.38       607


    clf = RandomForestClassifier()
    clf.fit(X_train, y_train)
    clf=  clf.set_params(warm_start=True)

                 precision    recall  f1-score   support

          1       0.43      0.44      0.43       122
          2       0.29      0.33      0.31       120
          3       0.46      0.53      0.49       246
          4       0.35      0.18      0.23       119

avg / total       0.40      0.40      0.39       607

    clf = GradientBoostingClassifier().fit(X_train, y_train)
             precision    recall  f1-score   support

          1       0.45      0.36      0.40       122
          2       0.33      0.27      0.29       120
          3       0.46      0.65      0.54       246
          4       0.32      0.16      0.21       119

avg / total       0.40      0.42      0.40       607

    clf = GradientBoostingClassifier()
    clf.fit(X_train, y_train)
    clf = clf.set_params(warm_start=True)

          1       0.45      0.35      0.39       122
          2       0.35      0.28      0.31       120
          3       0.45      0.67      0.54       246
          4       0.29      0.13      0.18       119

avg / total       0.40      0.42      0.39       607


    scaler = MinMaxScaler()
    scaler.fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)
        clf = VotingClassifier(
        estimators=[('lr', LogisticRegression(random_state=0)), ('rf', RandomForestClassifier()), ('mnb', MultinomialNB()) ],
        voting='hard'

    ).fit(X_train, y_train)


/home/sean/venv1/lib/python3.6/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.
          1       0.44      0.23      0.30       122
          2       0.23      0.05      0.08       120
  if diff:
          3       0.43      0.91      0.59       246
          4       1.00      0.01      0.02       119

avg / total       0.50      0.43      0.32       607
    clf = VotingClassifier(
        estimators=[('lr', LogisticRegression(random_state=0)), ('rf', RandomForestClassifier()), ('gb', GradientBoostingClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)
             precision    recall  f1-score   support

          1       0.42      0.38      0.40       122
          2       0.40      0.21      0.27       120
          3       0.45      0.77      0.57       246
          4       0.44      0.06      0.10       119

avg / total       0.43      0.44      0.38       607

    clf = VotingClassifier(
        estimators=[('lr', LogisticRegression(random_state=0)), ('rf', RandomForestClassifier()), ('gb', GradientBoostingClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)

Normalized
             precision    recall  f1-score   support

          1       0.44      0.46      0.45       122
          2       0.33      0.20      0.25       120
          3       0.46      0.72      0.56       246
          4       0.27      0.06      0.10       119

avg / total       0.39      0.43      0.39       607

    clf = VotingClassifier(
        estimators=[('lr', LogisticRegression(random_state=0)), ('rf', RandomForestClassifier()), ('nn', MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(15,), random_state=1)) ],
        voting='hard'

    ).fit(X_train, y_train)
                 precision    recall  f1-score   support

          1       0.41      0.45      0.43       122
          2       0.24      0.17      0.20       120
          3       0.45      0.66      0.53       246
          4       0.29      0.06      0.10       119

avg / total       0.37      0.40      0.36       607


    clf = VotingClassifier(
        estimators=[('lr', LogisticRegression(random_state=0)), ('rf', RandomForestClassifier()), ('ab', AdaBoostClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)
        clf = VotingClassifier(
        estimators=[('lr', LogisticRegression(random_state=0)), ('rf',  GradientBoostingClassifier()), ('ab', AdaBoostClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)
        clf = VotingClassifier(
        estimators=[('lsvm', LinearSVC(random_state=0)), ('rf',  GradientBoostingClassifier()), ('ab', AdaBoostClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)
              1       0.43      0.38      0.40       122
          2       0.33      0.17      0.22       120
          3       0.44      0.74      0.55       246
          4       0.30      0.06      0.10       119

avg / total       0.39      0.42      0.37       607

    clf = VotingClassifier(
        estimators=[('lsvm', LinearSVC(random_state=0)), ('rf',  GradientBoostingClassifier()), ('rf', RandomForestClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)
                 precision    recall  f1-score   support

          1       0.44      0.43      0.44       122
          2       0.31      0.20      0.24       120
          3       0.45      0.72      0.56       246
          4       0.41      0.06      0.10       119

avg / total       0.41      0.43      0.38       607
    clf = VotingClassifier(
        estimators=[('ab', AdaBoostClassifier()), ('gb',  GradientBoostingClassifier()), ('rf', RandomForestClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)

    clf = VotingClassifier(
        estimators=[('ab', AdaBoostClassifier()), ('gb',  GradientBoostingClassifier()), ('rf', RandomForestClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)

             precision    recall  f1-score   support

          1       0.45      0.45      0.45       122
          2       0.32      0.25      0.28       120
          3       0.46      0.67      0.55       246
          4       0.31      0.08      0.12       119

avg / total       0.40      0.43      0.39       607
    clf = VotingClassifier(
        estimators=[('lsvm', LinearSVC(random_state=0)), ('rf',  GradientBoostingClassifier()), ('lr', LogisticRegression()) ],
        voting='hard'

    ).fit(X_train, y_train)

                 precision    recall  f1-score   support

          1       0.43      0.35      0.39       122
          2       0.35      0.15      0.21       120
          3       0.44      0.81      0.57       246
          4       0.50      0.03      0.06       119

avg / total       0.43      0.43      0.36       607

    from sklearn.neural_network import MLPClassifier
    clf = VotingClassifier(
        estimators=[('lsvm', LinearSVC(random_state=0)), ('rf',  GradientBoostingClassifier()), ('mnb', MultinomialNB()) , ('lr', LogisticRegression(random_state=0)), ('ab', AdaBoostClassifier())],
        voting='hard'

    ).fit(X_train, y_train)
             precision    recall  f1-score   support

          1       0.45      0.25      0.32       122
          2       0.30      0.11      0.16       120
          3       0.43      0.86      0.57       246
          4       0.50      0.01      0.02       119

avg / total       0.42      0.42      0.33       607
    clf = VotingClassifier(
        estimators=[('ab', AdaBoostClassifier()), ('gb',  GradientBoostingClassifier()), ('rf', RandomForestClassifier()) ],
        voting='hard'

    ).fit(X_train, y_train)
             1       0.41      0.38      0.39       122
          2       0.33      0.26      0.29       120
          3       0.45      0.66      0.53       246
          4       0.38      0.13      0.19       119

avg / total       0.40      0.42      0.39       607

    clf = VotingClassifier(
        estimators=[('ab', AdaBoostClassifier()), ('gb',  GradientBoostingClassifier()), ('rf', RandomForestClassifier()) ],
        voting='soft'

    ).fit(X_train, y_train)
             precision    recall  f1-score   support

  if diff:
          1       0.49      0.40      0.44       122
          2       0.32      0.24      0.28       120
          3       0.47      0.68      0.55       246
          4       0.32      0.15      0.20       119

avg / total       0.41      0.43      0.41       607

    clf = VotingClassifier(
        estimators=[('ab', AdaBoostClassifier()), ('gb',  GradientBoostingClassifier()), ('rf', LogisticRegression(random_state=0)) ],
        voting='soft'

    ).fit(X_train, y_train)
          1       0.47      0.32      0.38       122
          2       0.39      0.20      0.27       120
          3       0.44      0.78      0.56       246
          4       0.31      0.07      0.11       119

avg / total       0.41      0.43      0.38       607



##############################################################################
    clf = VotingClassifier(
        estimators=[('ab', AdaBoostClassifier()), ('gb',  GradientBoostingClassifier(n_estimators=100)), ('rf', RandomForestClassifier(n_estimators=100)) ],
        voting='soft'

    ).fit(X_train, y_train)
              1       0.49      0.37      0.42       122
          2       0.34      0.22      0.27       120
          3       0.45      0.72      0.56       246
          4       0.38      0.15      0.22       119

avg / total       0.42      0.44      0.40       607
    clf = GradientBoostingClassifier(n_estimators=100).fit(X_train, y_train)
             precision    recall  f1-score   support

          1       0.47      0.37      0.41       122
          2       0.36      0.30      0.33       120
          3       0.47      0.67      0.55       246
          4       0.32      0.16      0.21       119

avg / total       0.42      0.44      0.41       607

    clf = GradientBoostingClassifier(n_estimators=1000).fit(X_train, y_train)
             precision    recall  f1-score   support

          1       0.48      0.39      0.43       122
          2       0.37      0.35      0.36       120
          3       0.50      0.61      0.55       246
          4       0.35      0.28      0.31       119

avg / total       0.44      0.45      0.44       607

    clf = VotingClassifier(
        estimators=[('ab', AdaBoostClassifier()), ('gb',  GradientBoostingClassifier(n_estimators=1000)), ('rf', RandomForestClassifier(n_estimators=1000)) ],
        voting='soft'

    ).fit(X_train, y_train)
          1       0.50      0.39      0.44       122
          2       0.34      0.35      0.35       120
          3       0.48      0.60      0.53       246
          4       0.33      0.23      0.27       119

avg / total       0.43      0.43      0.42       607